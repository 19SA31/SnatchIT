<script>
const shopLoad = async (req, res, next) => {
    try {
      if (req.query.search) {
        
        let payload = req.query.search.trim();
        let searchResult = await productModel
          .find({
            productName: { $regex: new RegExp("^" + payload + ".*", "i") },
          })
          .populate("productCategory")
          .exec();
        if (searchResult) {
          var sorted = true;
        }
  
        let userId = req.session.user;
        const categories = await categoryHelper.getAllActiveCategory();
  
        let cartCount = await cartHelper.getCartCount(userId);
  
        let wishListCount = await wishlistHelper.getWishListCount(userId);
  
        let products = await productHelper.getAllActiveProducts();
        for (const product of products) {
          const cartStatus = await cartHelper.isAProductInCart(
            userId,
            product._id
          );
          const wishlistStatus = await wishlistHelper.isInWishlist(
            userId,
            product._id
          );
        }
        const offerPrice = await offerHelper.findOffer(searchResult);
  
        let itemsPerPage = 6;
        let currentPage = parseInt(req.query.page) || 1;
        let startIndex = (currentPage - 1) * itemsPerPage;
        let endIndex = startIndex + itemsPerPage;
        let totalPages = Math.ceil(offerPrice.length / 6);
        console.log(totalPages);
        const currentProduct = offerPrice.slice(startIndex, endIndex);
  
        res.render("user/shop", {
          products: offerPrice,
          userData: req.session.user,
          cartCount,
          wishListCount,
          categories,
          sorted,
          totalPages,
          payload,
        });
      } else {
        
        let userId = req.session.user;
  
        const extractPrice = (price) => parseInt(price.replace(/[^\d]/g, ""));
  
        const categories = await categoryHelper.getAllcategory();
  
        let cartCount = await cartHelper.getCartCount(userId);
  
        let wishListCount = await wishlistHelper.getWishListCount(userId);
  
        let products = await productHelper.getAllActiveProducts();
  
        const offerPrice = await offerHelper.findOffer(products);
        let sorted = false;
        let normalSorted;
  
        if (req.query.filter) {
          if (req.query.filter == "Ascending") {
            console.log("inside ascending");
            offerPrice.sort(
              (a, b) => extractPrice(a.productPrice) - extractPrice(b.productPrice)
            );
            normalSorted="Ascending"
         
          } else if (req.query.filter == "Descending") {
            offerPrice.sort(
              (a, b) => extractPrice(b.productPrice) - extractPrice(a.productPrice)
            );
            normalSorted="Descending"
        
          } else if (req.query.filter == "Alpha") {
            offerPrice.sort((a, b) => {
              const nameA = a.productName.toUpperCase();
              const nameB = b.productName.toUpperCase();
              if (nameA < nameB) {
                return -1;
              }
              if (nameA > nameB) {
                return 1;
              }
              return 0;
            });
            normalSorted="Alpha"
          }
        }
  
        let itemsPerPage = 6;
        let currentPage = parseInt(req.query.page) || 1;
        let startIndex = (currentPage - 1) * itemsPerPage;
        let endIndex = startIndex + itemsPerPage;
        let totalPages = Math.ceil(offerPrice.length / 6);
        console.log(totalPages);
        const currentProduct = offerPrice.slice(startIndex, endIndex);
  
        res.render("user/shop", {
          products: currentProduct,
          userData: req.session.user,
          cartCount,
          wishListCount,
          categories,
          normalSorted,
          totalPages: totalPages,sorted,filter:req.query.filter
        });
      }
    } catch (error) {
      next(error);
    }
  };